version: '3.8'

services:
  mongo1:
    hostname: mongo1
    container_name: mongo1
    image: mongo:8.0
    expose:
      - 27017
    ports:
      - 30001:27017
    restart: always
    command: mongod --replSet my-mongo-set --bind_ip_all
    volumes:
      - mongo1_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - MONGO
      - business-network

  mongo2:
    hostname: mongo2
    container_name: mongo2
    image: mongo:8.0
    expose:
      - 27017
    ports:
      - 30002:27017
    restart: always
    command: mongod --replSet my-mongo-set --bind_ip_all
    volumes:
      - mongo2_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - MONGO
      - business-network

  mongo3:
    hostname: mongo3
    container_name: mongo3
    image: mongo:8.0
    expose:
      - 27017
    ports:
      - 30003:27017
    restart: always
    command: mongod --replSet my-mongo-set --bind_ip_all
    volumes:
      - mongo3_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - MONGO
      - business-network

  mongo-init:
    image: mongo:8.0
    restart: "no"
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    command:
      - bash
      - -c
      - |
        # Wait for MongoDB services to be ready
        echo "Waiting for MongoDB nodes to be ready..."
        sleep 10
        
        echo "Initializing replica set..."
        mongosh --host mongo1:27017 --eval '
          rs.initiate({
            _id: "my-mongo-set",
            members: [
              { _id: 0, host: "localhost:30001" },
              { _id: 1, host: "localhost:30002" },
              { _id: 2, host: "localhost:30003" }
            ]
          })
        '
        
        # Wait for replica set to be initialized
        echo "Waiting for replica set to initialize..."
        sleep 15
        
        # Wait until primary is elected
        echo "Waiting for primary to be elected..."
        until mongosh --host mongo1:27017 --eval 'rs.isMaster().ismaster' 2>/dev/null | grep -q true; do
          echo "Still waiting for primary..."
          sleep 5
        done
        
        echo "Replica set status:"
        mongosh --host mongo1:27017 --eval 'rs.status()'
        
        echo "Creating inventory database and collection..."
        mongosh --host mongo1:27017 inventories_db --eval '
          db.createCollection("inventories")
          print("Sample inventory data inserted successfully")
        '
        
        # Create outbox collection for CDC
        echo "Creating outbox collection for CDC..."
        mongosh --host mongo1:27017 inventories_db --eval '
          db.createCollection("outbox")
          print("Outbox collection created and initialized for CDC")
        '
        
        echo "MongoDB replica set initialization complete!"
    networks:
      - MONGO

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  MONGO:
    driver: bridge
  business-network:
    external: true