services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: event-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_HOST_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${ZOOKEEPER_CLIENT_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - event-network
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: event-kafka-broker
    user: root
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_HOST_PORT}:9092"
      - "${KAFKA_INTERNAL_PORT}:29092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://localhost:${KAFKA_HOST_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - event-network
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: event-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${KAFDROP_HOST_PORT}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_UI_CLUSTER_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_INTERNAL_PORT}
      KAFKA_CLUSTERS_0_ZOOKEEPER: ${ZOOKEEPER_CONNECT}
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium:8083
      DYNAMIC_CONFIG_ENABLED: ${DYNAMIC_CONFIG_ENABLED}
      AUTH_TYPE: ${KAFKA_UI_AUTH_TYPE}
      SPRING_SECURITY_USER_NAME: ${KAFKA_UI_USERNAME}
      SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI_PASSWORD}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - event-network
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"

  debezium:
    image: debezium/connect:2.4
    container_name: event-debezium-connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${DEBEZIUM_HOST_PORT}:8083"
    environment:
      GROUP_ID: ${DEBEZIUM_GROUP_ID}
      CONFIG_STORAGE_TOPIC: ${DEBEZIUM_CONFIG_STORAGE_TOPIC}
      OFFSET_STORAGE_TOPIC: ${DEBEZIUM_OFFSET_STORAGE_TOPIC}
      STATUS_STORAGE_TOPIC: ${DEBEZIUM_STATUS_STORAGE_TOPIC}
      BOOTSTRAP_SERVERS: kafka:${KAFKA_INTERNAL_PORT}
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    volumes:
      - ./connectors:/kafka/connect/connectors
      - ./config:/kafka/connect/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - event-network
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:

networks:
  event-network:
    driver: bridge